/**
 * @author Gary Law ( Skin )
 * See LICENSE file in root directory for full license.
 *
 * This plugin is to autogenerate the package.json file for the theme in development.
 * The package.json file is generated by the Webpack compiler.watch that is executed
 * as part of the ghost server startup in index.js at root of the project.
 *
 * This genaration is subjts to all the weback inputFilesystem rules and cache layers.
 * 
 * File system issues
 * 
 * It seems the package.json is being cached on the inputFilesystem.
 * If the file is changed twice within a minute the second call reads a cached version without the change.
 * 
 * An article about cached filesystems, not the exact problem but similar subject
 * https://github.com/webpack/webpack/issues/1562
 *
 * Look into possibility of purging the filesystem
 * compilation.inputFileSystem.purge()
 *
 **/

const bytes = require('utf8-length')

function GhostPackageJson(options) {
  const o = options || {}
  this.source = o.source || 'package.json'
  this.startTime = Date.now()
  this.prevTimestamps = {}
}

GhostPackageJson.prototype.apply = function(compiler) {

  //We are hooking into the point where webpack is about to emit the files in its asset list
  //so we can add the mapped package.json to the theme directory.
  compiler.plugin('emit', function(compilation, callback) {

    compilation.inputFileSystem.readFile(this.source, function(err, result) {

      if (err) {
        callback(err)
        return
      }

      this.prevTimestamps = compilation.fileTimestamps;

      //Debug changed files
      /*
      var changedFiles = Object.keys(compilation.fileTimestamps).filter(function(watchfile) {
        return (this.prevTimestamps[watchfile] || this.startTime) < (compilation.fileTimestamps[watchfile] || Infinity);
      }.bind(this));
      console.log('GhostPackageJson changedFiles : ', changedFiles)
      */

      var packageJson = JSON.parse(result),
        packageReplication = {
          name: packageJson.name,
          description: packageJson.description || '',
          version: packageJson.version,
          author: packageJson.author,
          engines: packageJson.ghost && packageJson.ghost.engines ?
            packageJson.ghost.engines : {
              ghost: '>=1.0.0'
            },
          config: packageJson.ghost && packageJson.ghost.config ?
            packageJson.ghost.config : {
              posts_per_page: 5
            },
          email: packageJson.email,
          license: packageJson.license
        },
        packageReplicationSting = JSON.stringify(packageReplication, null, 2)


      compilation.assets['package.json'] = {
        source: function() {
          return packageReplicationSting
        },
        size: function() {
          return bytes(packageReplicationSting)
        }
      }

      callback()

    }.bind(this))
  }.bind(this))
}

module.exports = GhostPackageJson